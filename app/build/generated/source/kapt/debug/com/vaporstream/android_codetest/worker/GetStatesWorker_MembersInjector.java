// Generated by Dagger (https://dagger.dev).
package com.vaporstream.android_codetest.worker;

import androidx.work.ListenableWorker;
import com.google.common.util.concurrent.ListenableFuture;
import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GetStatesWorker_MembersInjector implements MembersInjector<GetStatesWorker> {
  private final Provider<ListenableFuture<ListenableWorker.Result>> statesWorkProvider;

  public GetStatesWorker_MembersInjector(
      Provider<ListenableFuture<ListenableWorker.Result>> statesWorkProvider) {
    this.statesWorkProvider = statesWorkProvider;
  }

  public static MembersInjector<GetStatesWorker> create(
      Provider<ListenableFuture<ListenableWorker.Result>> statesWorkProvider) {
    return new GetStatesWorker_MembersInjector(statesWorkProvider);
  }

  @Override
  public void injectMembers(GetStatesWorker instance) {
    injectStatesWork(instance, statesWorkProvider.get());
  }

  @InjectedFieldSignature("com.vaporstream.android_codetest.worker.GetStatesWorker.statesWork")
  public static void injectStatesWork(GetStatesWorker instance,
      ListenableFuture<ListenableWorker.Result> statesWork) {
    instance.statesWork = statesWork;
  }
}
