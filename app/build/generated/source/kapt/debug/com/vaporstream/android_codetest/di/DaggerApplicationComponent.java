// Generated by Dagger (https://dagger.dev).
package com.vaporstream.android_codetest.di;

import com.vaporstream.android_codetest.MyApplication;
import com.vaporstream.android_codetest.repository.UserRepository;
import com.vaporstream.android_codetest.repository.UserRepositoryImpl;
import com.vaporstream.android_codetest.repository.UserRepositoryImpl_MembersInjector;
import com.vaporstream.android_codetest.view.main.MainActivity;
import com.vaporstream.android_codetest.view.results.ResultsActivity;
import com.vaporstream.android_codetest.viewmodel.main.MainActivityViewModel;
import com.vaporstream.android_codetest.viewmodel.main.MainActivityViewModel_MembersInjector;
import com.vaporstream.android_codetest.viewmodel.user.UserViewModel;
import com.vaporstream.android_codetest.viewmodel.user.UserViewModel_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApplicationComponent implements ApplicationComponent {
  private final ApplicationModule applicationModule;

  private Provider<MyApplication> providesApplicationProvider;

  private Provider<UserRepository> provideUserRepositoryProvider;

  private DaggerApplicationComponent(ApplicationModule applicationModuleParam) {
    this.applicationModule = applicationModuleParam;
    initialize(applicationModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationModule applicationModuleParam) {
    this.providesApplicationProvider = DoubleCheck.provider(ApplicationModule_ProvidesApplicationFactory.create(applicationModuleParam));
    this.provideUserRepositoryProvider = DoubleCheck.provider(ApplicationModule_ProvideUserRepositoryFactory.create(applicationModuleParam));
  }

  @Override
  public void inject(MainActivity activity) {
  }

  @Override
  public void inject(ResultsActivity activity) {
  }

  @Override
  public void inject(UserViewModel userViewModel) {
    injectUserViewModel(userViewModel);
  }

  @Override
  public void inject(MainActivityViewModel mainActivityViewModel) {
    injectMainActivityViewModel(mainActivityViewModel);
  }

  @Override
  public void inject(UserRepositoryImpl userRepository) {
    injectUserRepositoryImpl(userRepository);
  }

  private UserViewModel injectUserViewModel(UserViewModel instance) {
    UserViewModel_MembersInjector.injectApplication(instance, providesApplicationProvider.get());
    UserViewModel_MembersInjector.injectUserRepository(instance, provideUserRepositoryProvider.get());
    return instance;
  }

  private MainActivityViewModel injectMainActivityViewModel(MainActivityViewModel instance) {
    MainActivityViewModel_MembersInjector.injectUserRepository(instance, provideUserRepositoryProvider.get());
    return instance;
  }

  private UserRepositoryImpl injectUserRepositoryImpl(UserRepositoryImpl instance) {
    UserRepositoryImpl_MembersInjector.injectUserDao(instance, ApplicationModule_ProvideUserDatabaseDaoFactory.provideUserDatabaseDao(applicationModule));
    return instance;
  }

  public static final class Builder {
    private ApplicationModule applicationModule;

    private Builder() {
    }

    public Builder applicationModule(ApplicationModule applicationModule) {
      this.applicationModule = Preconditions.checkNotNull(applicationModule);
      return this;
    }

    public ApplicationComponent build() {
      Preconditions.checkBuilderRequirement(applicationModule, ApplicationModule.class);
      return new DaggerApplicationComponent(applicationModule);
    }
  }
}
