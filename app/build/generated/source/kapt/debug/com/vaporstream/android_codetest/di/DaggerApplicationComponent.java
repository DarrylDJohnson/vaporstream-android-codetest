// Generated by Dagger (https://dagger.dev).
package com.vaporstream.android_codetest.di;

import androidx.lifecycle.LiveData;
import androidx.work.ListenableWorker;
import androidx.work.WorkManager;
import com.google.common.util.concurrent.ListenableFuture;
import com.vaporstream.android_codetest.di.modules.DatabaseModule;
import com.vaporstream.android_codetest.di.modules.DatabaseModule_ProvideUserDatabaseDaoFactory;
import com.vaporstream.android_codetest.di.modules.DatabaseModule_ProvideUserRepositoryFactory;
import com.vaporstream.android_codetest.di.modules.RetrofitModule;
import com.vaporstream.android_codetest.di.modules.RetrofitModule_ProvideOkHttpClientFactory;
import com.vaporstream.android_codetest.di.modules.RetrofitModule_ProvideRetrofitFactory;
import com.vaporstream.android_codetest.di.modules.StatesModule;
import com.vaporstream.android_codetest.di.modules.StatesModule_ProvideGetStatesWorkerIdFactory;
import com.vaporstream.android_codetest.di.modules.StatesModule_ProvideStateInterfaceFactory;
import com.vaporstream.android_codetest.di.modules.StatesModule_ProvideStatesFactory;
import com.vaporstream.android_codetest.di.modules.StatesModule_ProvideStatesWorkFactory;
import com.vaporstream.android_codetest.di.modules.WorkerModule;
import com.vaporstream.android_codetest.di.modules.WorkerModule_ProvideWorkManagerFactory;
import com.vaporstream.android_codetest.repository.UserRepository;
import com.vaporstream.android_codetest.repository.UserRepositoryImpl;
import com.vaporstream.android_codetest.repository.UserRepositoryImpl_MembersInjector;
import com.vaporstream.android_codetest.utilities.StatesInterface;
import com.vaporstream.android_codetest.view.main.MainActivity;
import com.vaporstream.android_codetest.view.main.MainActivity_MembersInjector;
import com.vaporstream.android_codetest.viewmodel.main.MainActivityViewModel;
import com.vaporstream.android_codetest.viewmodel.main.MainActivityViewModel_MembersInjector;
import com.vaporstream.android_codetest.viewmodel.user.UserViewModel;
import com.vaporstream.android_codetest.viewmodel.user.UserViewModel_MembersInjector;
import com.vaporstream.android_codetest.worker.GetStatesWorker;
import com.vaporstream.android_codetest.worker.GetStatesWorker_MembersInjector;
import com.vaporstream.android_codetest.worker.InsertUserWorker;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import java.util.UUID;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApplicationComponent implements ApplicationComponent {
  private final DatabaseModule databaseModule;

  private final StatesModule statesModule;

  private Provider<UserRepository> provideUserRepositoryProvider;

  private Provider<WorkManager> provideWorkManagerProvider;

  private Provider<UUID> provideGetStatesWorkerIdProvider;

  private Provider<LiveData<String[]>> provideStatesProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<StatesInterface> provideStateInterfaceProvider;

  private DaggerApplicationComponent(DatabaseModule databaseModuleParam,
      RetrofitModule retrofitModuleParam, WorkerModule workerModuleParam,
      StatesModule statesModuleParam) {
    this.databaseModule = databaseModuleParam;
    this.statesModule = statesModuleParam;
    initialize(databaseModuleParam, retrofitModuleParam, workerModuleParam, statesModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private ListenableFuture<ListenableWorker.Result> getListenableFutureOfResult() {
    return StatesModule_ProvideStatesWorkFactory.provideStatesWork(statesModule, provideStateInterfaceProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final DatabaseModule databaseModuleParam,
      final RetrofitModule retrofitModuleParam, final WorkerModule workerModuleParam,
      final StatesModule statesModuleParam) {
    this.provideUserRepositoryProvider = DoubleCheck.provider(DatabaseModule_ProvideUserRepositoryFactory.create(databaseModuleParam));
    this.provideWorkManagerProvider = DoubleCheck.provider(WorkerModule_ProvideWorkManagerFactory.create(workerModuleParam));
    this.provideGetStatesWorkerIdProvider = StatesModule_ProvideGetStatesWorkerIdFactory.create(statesModuleParam);
    this.provideStatesProvider = DoubleCheck.provider(StatesModule_ProvideStatesFactory.create(statesModuleParam, provideGetStatesWorkerIdProvider));
    this.provideOkHttpClientProvider = DoubleCheck.provider(RetrofitModule_ProvideOkHttpClientFactory.create(retrofitModuleParam));
    this.provideRetrofitProvider = DoubleCheck.provider(RetrofitModule_ProvideRetrofitFactory.create(retrofitModuleParam, provideOkHttpClientProvider));
    this.provideStateInterfaceProvider = DoubleCheck.provider(StatesModule_ProvideStateInterfaceFactory.create(statesModuleParam, provideRetrofitProvider));
  }

  @Override
  public void inject(UserViewModel userViewModel) {
    injectUserViewModel(userViewModel);
  }

  @Override
  public void inject(MainActivityViewModel mainActivityViewModel) {
    injectMainActivityViewModel(mainActivityViewModel);
  }

  @Override
  public void inject(UserRepositoryImpl userRepository) {
    injectUserRepositoryImpl(userRepository);
  }

  @Override
  public void inject(GetStatesWorker getStatesWorker) {
    injectGetStatesWorker(getStatesWorker);
  }

  @Override
  public void inject(InsertUserWorker insertUserWorker) {
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);
  }

  private UserViewModel injectUserViewModel(UserViewModel instance) {
    UserViewModel_MembersInjector.injectUserRepository(instance, provideUserRepositoryProvider.get());
    return instance;
  }

  private MainActivityViewModel injectMainActivityViewModel(MainActivityViewModel instance) {
    MainActivityViewModel_MembersInjector.injectWorkManager(instance, provideWorkManagerProvider.get());
    MainActivityViewModel_MembersInjector.injectStates(instance, provideStatesProvider.get());
    return instance;
  }

  private UserRepositoryImpl injectUserRepositoryImpl(UserRepositoryImpl instance) {
    UserRepositoryImpl_MembersInjector.injectUserDao(instance, DatabaseModule_ProvideUserDatabaseDaoFactory.provideUserDatabaseDao(databaseModule));
    return instance;
  }

  private GetStatesWorker injectGetStatesWorker(GetStatesWorker instance) {
    GetStatesWorker_MembersInjector.injectStatesWork(instance, getListenableFutureOfResult());
    return instance;
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectWorkManager(instance, provideWorkManagerProvider.get());
    return instance;
  }

  public static final class Builder {
    private DatabaseModule databaseModule;

    private RetrofitModule retrofitModule;

    private WorkerModule workerModule;

    private StatesModule statesModule;

    private Builder() {
    }

    public Builder databaseModule(DatabaseModule databaseModule) {
      this.databaseModule = Preconditions.checkNotNull(databaseModule);
      return this;
    }

    public Builder retrofitModule(RetrofitModule retrofitModule) {
      this.retrofitModule = Preconditions.checkNotNull(retrofitModule);
      return this;
    }

    public Builder workerModule(WorkerModule workerModule) {
      this.workerModule = Preconditions.checkNotNull(workerModule);
      return this;
    }

    public Builder statesModule(StatesModule statesModule) {
      this.statesModule = Preconditions.checkNotNull(statesModule);
      return this;
    }

    public ApplicationComponent build() {
      Preconditions.checkBuilderRequirement(databaseModule, DatabaseModule.class);
      if (retrofitModule == null) {
        this.retrofitModule = new RetrofitModule();
      }
      Preconditions.checkBuilderRequirement(workerModule, WorkerModule.class);
      Preconditions.checkBuilderRequirement(statesModule, StatesModule.class);
      return new DaggerApplicationComponent(databaseModule, retrofitModule, workerModule, statesModule);
    }
  }
}
